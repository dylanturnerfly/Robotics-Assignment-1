# Computational Robotics
# Component 3
# Dylan Turner & Noor Hasan

import numpy as np
import numpy.linalg 
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import random
import math

############################################################
#                  Rigid Body in Motion                    #
############################################################

#Define a planar environment of dimensions 20x20, with bounds [-10,10] for x and y. A rectangular
# robot of dimensions 0.5x0.3. This robot is controlled via a velocity vector V = (Vx,Vy,Vθ). There
# are no obstacles in this environment.

#Input: start pose x0 ∈SE(2) and goal position xG in nSE(2). Output
# a path (sequence of poses) that start at x0 and ends in xG.
def interpolate_rigid_body(start_pose, goal_pose):
    return 1

#Input: start pose x0 ∈SE(2) and a Plan ( a sequence of N tuples (velocity, duration)) that is 
# applied to the start pose and results in a path of N+ 1 states.
def forward_propagate_rigid_body(start_pose, plan):
    return 1

#Input: A path to visualize. Your visualization must include the path and an animation of the robot’s movement.
def visualize_path(path):
    return 1

#TODO: In your report include and analyze any design choice of your implementation. Include visual-
# izations of the paths generated by both methods. Submit an example animation (gif is prefered
# but can also be a small mp4).